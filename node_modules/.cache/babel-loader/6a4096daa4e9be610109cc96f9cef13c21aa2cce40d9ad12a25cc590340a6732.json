{"ast":null,"code":"//import {createStore} from 'redux';\n//configureStore like createStore creates a store but it makes merging multiple reducers into one reducer easier \nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst inithialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: inithialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n// const counterReducer =(state = initialState , action) => {\n//     if (action.type === 'increment'){\n//         return{\n//             counter: state.counter+ 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//      if(action.type === 'increase'){\n//          return{\n//              counter: state.counter + action.amount,\n//              showCounter: state.showCounter\n//          }\n//      }\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","inithialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","counterSlice","auth","counterActions","actions","authActions"],"sources":["/Users/sunaz/Downloads/ReduxAndRouter/src/store/index.js"],"sourcesContent":["//import {createStore} from 'redux';\n//configureStore like createStore creates a store but it makes merging multiple reducers into one reducer easier \nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n const inithialAuthState = {\n     isAuthenticated: false\n };\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState:inithialAuthState,\n    reducers:{\n        login(state){\n            state.isAuthenticated = true;\n        },\n        logout(state){\n            state.isAuthenticated = false;\n        }\n    }\n});\n// const counterReducer =(state = initialState , action) => {\n//     if (action.type === 'increment'){\n//         return{\n//             counter: state.counter+ 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//      if(action.type === 'increase'){\n//          return{\n//              counter: state.counter + action.amount,\n//              showCounter: state.showCounter\n//          }\n//      }\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n    reducer:{ counter: counterSlice.reducer , auth: authSlice.reducer },\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE7D,MAAMC,iBAAiB,GAAG;EACtBC,eAAe,EAAE;AACrB,CAAC;AAEF,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC1BK,IAAI,EAAE,MAAM;EACZC,YAAY,EAACJ,iBAAiB;EAC9BK,QAAQ,EAAC;IACLC,KAAKA,CAACC,KAAK,EAAC;MACRA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IACDO,MAAMA,CAACD,KAAK,EAAC;MACTA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMQ,KAAK,GAAGV,cAAc,CAAC;EACzBW,OAAO,EAAC;IAAEC,OAAO,EAAEC,YAAY,CAACF,OAAO;IAAGG,IAAI,EAAEX,SAAS,CAACQ;EAAQ;AACtE,CAAC,CAAC;AACF,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGd,SAAS,CAACa,OAAO;AAC5C,eAAeN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}
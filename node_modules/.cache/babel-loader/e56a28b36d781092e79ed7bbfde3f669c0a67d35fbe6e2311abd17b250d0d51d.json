{"ast":null,"code":"//import {createStore} from 'redux';\n//configureStore like createStore creates a store but it makes merging multiple reducers into one reducer easier \nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      //this is forbidden when we use reducer but not with toolkit to manage state directly\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst inithialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: 'auth',\n  initialState: inithialAuthState,\n  reducers\n});\n// const counterReducer =(state = initialState , action) => {\n//     if (action.type === 'increment'){\n//         return{\n//             counter: state.counter+ 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//      if(action.type === 'increase'){\n//          return{\n//              counter: state.counter + action.amount,\n//              showCounter: state.showCounter\n//          }\n//      }\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","inithialAuthState","isAuthenticated","store","reducer","counterActions","actions"],"sources":["/Users/sunaz/Downloads/ReduxAndRouter/src/store/index.js"],"sourcesContent":["//import {createStore} from 'redux';\n//configureStore like createStore creates a store but it makes merging multiple reducers into one reducer easier \nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n\nconst initialCounterState = { counter: 0, showCounter: true}\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers:{\n     \n      increment(state) {\n          //this is forbidden when we use reducer but not with toolkit to manage state directly\n          state.counter++;\n      },\n      decrement(state) {\n        state.counter--; \n      },\n      increase(state, action) {\n          state.counter = state.counter + action.payload;\n      },\n      toggleCounter(state) {\n          state.showCounter = !state.showCounter\n      }\n  }\n});\n\n const inithialAuthState ={\n     isAuthenticated: false\n };\n\ncreateSlice({\n    name: 'auth',\n    initialState:inithialAuthState,\n    reducers\n})\n// const counterReducer =(state = initialState , action) => {\n//     if (action.type === 'increment'){\n//         return{\n//             counter: state.counter+ 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//      if(action.type === 'increase'){\n//          return{\n//              counter: state.counter + action.amount,\n//              showCounter: state.showCounter\n//          }\n//      }\n//     if(action.type === 'decrement'){\n//         return{\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n\nconst store = configureStore({\n    reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\n\nexport default store;"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAG9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAE5D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAC;IAELC,SAASA,CAACC,KAAK,EAAE;MACb;MACAA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACF,CAAC,CAAC;AAED,MAAMY,iBAAiB,GAAE;EACrBC,eAAe,EAAE;AACrB,CAAC;AAEFjB,WAAW,CAAC;EACRM,IAAI,EAAE,MAAM;EACZC,YAAY,EAACS,iBAAiB;EAC9BR;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMU,KAAK,GAAGjB,cAAc,CAAC;EACzBkB,OAAO,EAAEd,YAAY,CAACc;AAC1B,CAAC,CAAC;AACF,OAAO,MAAMC,cAAc,GAAGf,YAAY,CAACgB,OAAO;AAElD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}